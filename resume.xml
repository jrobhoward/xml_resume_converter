<?xml version="1.0"?>
<resume>
	<contactInfo>
		<name>James Robert Howard</name>
		<emailAddress>redacted</emailAddress>
		<phone>redacted</phone>
		<webAddress>http://www.linkedin.com/pub/james-howard/15/b34/23b</webAddress>
	</contactInfo>
	<summary>An accomplished Software Engineer with over fifteen years experience working on complex systems where performance, scalability, and correctness are essential.</summary>
	<interests>
		<interest>Distributed &amp; Concurrent Programming</interest>
		<interest>Operating Systems</interest>
		<interest>Security</interest>
		<interest>Troubleshooting</interest>
	</interests>
	<workExperience>
		<jobTitle>Senior Software Engineer</jobTitle>
		<employer>Dell Compellent</employer>
		<employerWeb>http://www.dell.com/us/business/p/storage-san</employerWeb>
		<startDate>January 2013</startDate>
		<endDate>Present</endDate>
		<responsiblities>
			<responsiblity>Software design, development, and build process improvements related to Dell Storage Manager and Storage Center</responsiblity>
			<responsiblity>Design and planning of a Dell Storage Manager HA (High Availability) configuration</responsiblity>
		</responsiblities>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>DSM Evolution</accomplishmentId>
				<description>Updated Dell Storage Manager platform from {GlassFish -&gt; JBoss -&gt; Wildfly} and {Java6 -&gt; Java7 &gt; Java8} across DSM releases, without adversely impacting other developers or the schedule</description>
			</accomplishment>
			<accomplishment>
				<accomplishmentId>Virtual Appliance</accomplishmentId>
				<description>Leveraged Jenkins CI and vSphere Web Services to produce
automated virtual appliance builds of Dell Storage Manager and Storage Center</description>
			</accomplishment>
			<accomplishment>
				<accomplishmentId>Build Improvments</accomplishmentId>
				<description>Converted DSM build processes from Ant to Gradle, making the
build more consistent and easier to maintain</description>
			</accomplishment>
			<accomplishment>
				<accomplishmentId>Developer Automation</accomplishmentId>
				<description>Wrote an Eclipse plugin to automate the creation of
development environments, reducing several hours of manual steps to under 20
minutes</description>
			</accomplishment>
			<accomplishment>
				<accomplishmentId>Logger Refactoring</accomplishmentId>
				<description>Replaced Dell Storage Manager's custom logging
implementation with log4j, increasing logging performance 100x</description>
			</accomplishment>
			<accomplishment>
				<accomplishmentId>PAM Library</accomplishmentId>
				<description>Designed a challenge/response authentication to control access into
DSM virtual appliance</description>
			</accomplishment>
		</accomplishments>
	</workExperience>
	<workExperience>
		<jobTitle>Staff Software Engineer</jobTitle>
		<employer>Siemens Energy</employer>
		<employerWeb>http://www.siemens.com/energy</employerWeb>
		<startDate>May 2000</startDate>
		<endDate>January 2013</endDate>
		<responsiblities>
			<responsiblity>Design and implementation of custom enhancements on top of Spectrum Power 3 (a
highly-available, redundant, Energy Management System) to meet customer
requirements</responsiblity>
			<responsiblity>Planning the deployment process and supported configurations for current and future
Spectrum releases</responsiblity>
			<responsiblity>Creating and maintaining technical documentation (e.g. design specifications,
installation &amp; maintenance documents, performance tuning guides)</responsiblity>
			<responsiblity>Technical consulting for project managers and customers</responsiblity>
			<responsiblity>Analysis and resolution of software, operating system, network, and security problems</responsiblity>
			<responsiblity>Mentoring less experienced coworkers</responsiblity>
			<responsiblity>On-site installation and direct customer support of Spectrum Power 3</responsiblity>
			<responsiblity>UNIX installation and maintenance (AIX, Linux)</responsiblity>
			<responsiblity>Oracle 11g (RAC, Data Guard) installation and maintenance</responsiblity>
			<responsiblity>Source code merges and builds</responsiblity>
		</responsiblities>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>Installation Automation</accomplishmentId>
				<description>In 2012, I modeled the data required for Spectrum installation
into an XML file and wrote tools for semantic validation and data extraction. When
completed, the 100+ page install document will be replaced with a much smaller install
guide (&lt;5 pages). System installations will be automated and yield consistent results,
regardless of the ability/experience of the person performing the installation</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>Virtualization</accomplishmentId>
				<description>I designed the first Spectrum system to take advantage of virtualization
technologies; reducing the cost of development systems by 60%</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>Web Applications</accomplishmentId>
				<description>I designed and implemented several web applications using PHP
and PostgreSQL on Linux. One tool is still being used for transmittals (official
correspondence between Siemens Energy and our customers). Another tool is used to
track customer defects</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>LAN Teaming</accomplishmentId>
				<description>I modernized Spectrum's network configuration to use a dualsegmented
network for redundancy. The previous/legacy network redundancy design
required two completely independent networks and a software daemon used to reroute
TCP/IP. As a result, fail-over time decreased from 30 seconds to under 1 second.</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>Split-room Configuration</accomplishmentId>
				<description>I designed an enhancement allowing one of our customers to
geographically separate their EMS system (with ½ of their active hosts running at one
site, and the other ½ running approximately 20 miles away). My role during
implementation was to add a heartbeat monitor that would disable ½ of the system in
the event of a total communication disruption between the two sites. This prevents a
split-brain situation where both sites could potentially be scanning RTUs</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>System Monitor</accomplishmentId>
				<description>I wrote a multi-threaded program that monitors the performance of
Spectrum hosts {CPU/memory usage, excessive paging, NIC errors or excessive
network bandwidth consumption, application failures}. Various additional aspects of
the system are also monitored {SQL database availability, network switch/router status,
SAN status, print queues}. This application generates EMS alarms when problems are
identified, and uses minimal system resources.</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>Equipment Status Display</accomplishmentId>
				<description>I rewrote the communication equipment status display for
one of our customers to meet their requirements. The updated display was written in
Java, and can be invoked as a traditional application or via their intranet using Java
Web Start.</description>
			</accomplishment>
		</accomplishments>
		<accomplishments>
			<accomplishment>
				<accomplishmentId>UI Prototype</accomplishmentId>
				<description>I designed a prototype for a replacement UI using Java/Swing and the
NetBeans Platform. Although it was deemed &quot;impressive&quot;, a decision was made by our
architects to continue using technologies our division is already comfortable with (QT,
ActiveX, HTML/JavaScript).</description>
			</accomplishment>
		</accomplishments>
	</workExperience>
	<technicalSkills>
		<skill>AIX</skill>
		<skill>Bourne,Korn Shell</skill>
		<skill>C,C++</skill>
		<skill>Confluence</skill>
		<skill>C#</skill>
		<skill>Dbx,Gdb,Jdb</skill>
		<skill>DocBook</skill>
		<skill>DTrace</skill>
		<skill>Eclipse</skill>
		<skill>Erlang</skill>
		<skill>FOP</skill>
		<skill>FreeBSD</skill>
		<skill>Git</skill>
		<skill>Go</skill>
		<skill>Gradle</skill>
		<skill>IPsec</skill>
		<skill>Jails</skill>
		<skill>Java</skill>
		<skill>Jenkins</skill>
		<skill>JIRA</skill>
		<skill>Linux</skill>
		<skill>Nmon</skill>
		<skill>SQL</skill>
		<skill>Stash</skill>
		<skill>Strace</skill>
		<skill>Sublime</skill>
		<skill>Vi</skill>
		<skill>VMware</skill>
		<skill>XML</skill>
		<skill>ZFS</skill>
	</technicalSkills>
	<education>
		<degree>
			<degreeName>Master of Science</degreeName>
			<universityName>University of Minnesota, Twin Cities</universityName>
			<universityWeb>http://twin-cities.umn.edu</universityWeb>
			<startDate>2010</startDate>
			<endDate>2012</endDate>
			<arbitraryInfoList>
				<ai>
					<key>Major</key>
					<value>Software Engineering</value>
				</ai>
				<ai>
					<key>GPA</key>
					<value>3.89/4.0</value>
				</ai>
			</arbitraryInfoList>
		</degree>
		<degree>
			<degreeName>Bachelor of Science</degreeName>
			<universityName>University of Minnesota, Duluth</universityName>
			<universityWeb>http://www.d.umn.edu</universityWeb>
			<startDate>1996</startDate>
			<endDate>2000</endDate>
			<arbitraryInfoList>
				<ai>
					<key>Major</key>
					<value>Computer Science</value>
				</ai>
				<ai>
					<key>Minors</key>
					<value>Mathematics, Philosophy</value>
				</ai>
				<ai>
					<key>Honors</key>
					<value>Dean's List</value>
				</ai>
			</arbitraryInfoList>
		</degree>
	</education>
	<projects>
		<project>
			<name>Photo Kiosk</name>
			<info>I designed and coded the software component of a photo kiosk used in many of my
friends' weddings.</info>
			<info>An SLR camera and dual printers are controlled by an OS X (Cocoa) application.</info>
			<info>The user interface is presently implemented as an interactive touchscreen (staticallymounted
iPod touch). After a picture is taken, the photo kiosk user(s) are presented
with their picture; they can elect to print or retry.</info>
			<info>Previous (non-touchscreen) user interfaces were implemented using Apple &amp; Wii
remote controls.</info>
			<info>The software is extensible. Custom layouts/plugins can be designed using Quartz
Composer, eliminating the need to modify source code.</info>
		</project>
		<project>
			<name>SCADAbase</name>
			<info>As part of my MSSE independent study, I designed and implemented a working
prototype for SCADA middleware.</info>
			<info>The software was written in Erlang.</info>
			<info>A Java (NetBeans Platform) client connects using CORBA.</info>
			<info>Jenkins was used for Continuous Integration and execution of automated unit
tests</info>
			<info>Failover and hot-code update capabilities were demonstrated to my classmates.</info>
		</project>
		<project>
			<name>XML-based Resume</name>
			<info>Uses FOP to convert an XML-based resume into print quality PDF</info>
		</project>
	</projects>
</resume>
